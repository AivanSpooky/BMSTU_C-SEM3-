#ifndef FUNCS_H__

#define FUNCS_H__

#include <stdio.h>
#include "err_codes.h"
#include "mtr_io.h"

/**
 * @brief Функция складывает две матрицы
 * @warning Функция не сможет сложить матрицы, если они неправильно заданы (неверные/поврежденные данные)! На выходе - NULL-матрица!
 * @warning Функция не сможет сложить матрицы разных размеров! На выходе - NULL-матрица!
 * @param const mtr_t *matrix1 - первая матрица
 * @param const mtr_t *matrix2 - вторая матрица
 * @return Функция возвращает получившуюся матрицу
*/
mtr_t matrix_addition(const mtr_t *matrix1, const mtr_t *matrix2);

/**
 * @brief Функция умножает две матрицы
 * @warning Функция не сможет умножить матрицы, если они неправильно заданы (неверные/поврежденные данные)! На выходе - NULL-матрица!
 * @warning Функция не сможет умножить матрицы, если кол-во столбцов первой не равно кол-ву строк второй! На выходе - NULL-матрица!
 * @param const mtr_t *matrix1 - первая матрица
 * @param const mtr_t *matrix2 - вторая матрица
 * @return Функция возвращает получившуюся матрицу
*/
mtr_t matrix_multiplication(const mtr_t *matrix1, const mtr_t *matrix2);

/**
 * @brief Функция находит обратную матрицу
 * @warning Функция не сможет найти обратную матрицу, если она неправильно задана (неверные/поврежденные данные)! На выходе - NULL-матрица!
 * @warning Функция не сможет найти обратную матрицу, если она не квадратная! На выходе - NULL-матрица!
 * @warning Функция не сможет найти обратную матрицу, если она имеет нулевой определитель! На выходе - NULL-матрица!
 * @warning Функция не сможет найти обратную матрицу, если не получилось создать расширенную матрицу (см. реализацию выделения матрицы в mtr_alloc.h)! На выходе - NULL-матрица!
 * @param const mtr_t *mtr - переданная матрица
 * @return Функция возвращает получившуюся матрицу
*/
mtr_t matrix_inverse(const mtr_t *mtr);

/**
 * @brief Функция находит определитель квадратной матрицы (рекурсивный алгоритм)
 * @warning Функция не проверяет корректность элементов матрицы!
 * @warning Функция не проверяет корректность переданного значения n!
 * @warning Функция не проверяет, является ли матрица квадратной!
 * @param ptr - матрица
 * @param n - размер матрицы
 * @return Функция возвращает получившийся определитель
*/
double matrix_determinant(const double **ptr, size_t n);

#endif
