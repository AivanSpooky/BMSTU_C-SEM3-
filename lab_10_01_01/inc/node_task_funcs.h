#ifndef NODE_TASK_FUNCS_H__

#define NODE_TASK_FUNCS_H__

#include <stdlib.h>

#include "node_io.h"
#include "node_default_funcs.h"

/**
 * @brief Функция находит в списке элемент с заданным значением data
 * @param node_t head - голова списка
 * @param const void *data - указатель на поле со значением, которое необходимо найти в списке
 * @param cmp_t comparator - компаратор для сравнения значений node-ов
 * @warning Если функция не нашла элемент с указанным значением, то функция вернет NULL  
 * @return Функция возвращает указатель на найденный node
*/
node_t *find(node_t *head, const void *data, cmp_t comparator);

/**
 * @brief Функция освобождает память из под узла, который стоит в начале списка и возвращает значение данного узла
 * @param node_t head - голова списка
 * @warning Если в переданном списке нет элементов, то функция вернет NULL 
 * @return Функция возвращает указатель на данные из первого элемента списка
 * @warning Возвращаемое значение остается выделенным динамически, поэтому при неиспользовании значения необходимо освободить его с помощью free()
*/
void *pop_front(node_t **head);

/**
 * @brief Функция переворачивает список
 * @param node_t head - голова списка
 * @return Функция возвращает указатель на новую голову
*/
node_t *reverse(node_t *head);

/**
 * @brief Функция вставляет узел в отсортированный список в связи с передаваемым признаком сравнения
 * @details Если в списке голова равна NULL или вставляемый элемент должен быть помещен раньше головы, то он становится новой головой
 * @details Иначе функция проходится по списку и ищет место, куда необходимо вставить элемент
 * @param node_t head - указатель на указатель на голову списка
 * @param node_t element - узел, который нужно вставить в список
 * @param cmp_t comparator - признак сравнения элементов списка
 * @return Функция ничего не возвращает
*/
void sorted_insert(node_t **head, node_t *element, cmp_t comparator);

/**
 * @brief Функция сортирует список по возрастанию
 * @param node_t head - голова списка
 * @param cmp_t comparator - компаратор для сравнения значений node-ов
 * @return Функция возвращает указатель на новую голову
*/
node_t *sort(node_t *head, cmp_t comparator);

#endif
